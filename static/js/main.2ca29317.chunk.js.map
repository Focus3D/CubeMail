{"version":3,"sources":["Components/Aside/SendModel.js","Components/Aside/Aside.js","Components/Helper.js","Components/MessageList/MessageList.js","Components/Message/ReplyModel.js","Components/Message/ForwardModel.js","Components/Message/Message.js","Components/Api.js","App.js","index.js"],"names":["SendModel","console","log","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","message","callback","email","header","base64EncodedEmail","Base64","encodeURI","window","gapi","client","gmail","users","messages","send","userId","resource","raw","execute","handleSendResponse","res","result","labelIds","indexOf","title","description","status","duration","isClosable","Fragment","Button","w","h","leftIcon","BsPlusCircle","border","borderRadius","borderColor","variantColor","variant","onClick","Modal","size","id","onSubmit","e","preventDefault","form","target","emailTo","elements","value","subject","To","Subject","FormControl","isRequired","Input","type","placeholder","aria-describedby","Textarea","minH","resize","mr","Aside","getMessagesByCategory","Box","bg","color","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","_hover","MdStar","MdLabel","FiSend","FiFile","MdPeople","MdLoyalty","getHeader","headers","name","find","undefined","isEmpty","obj","key","hasOwnProperty","removeQuote","str","replace","Messages","handleMessageClick","messagesRow","Flex","direction","wrap","InputGroup","children","Icon","borderWidth","focusBorderColor","map","i","justify","borderTop","borderBottom","Skeleton","width","height","mb","overflowY","payload","split","msg","snippet","substr","background","cursor","Avatar","src","Text","fontSize","isTruncated","fontWeight","html","txt","document","createElement","innerHTML","decodeHtml","ReplyModel","replayData","handleReplayResponse","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","ForwardModel","forwardData","getMessageBody","handleForwardMsg","forwardTo","body","handleForwardResponse","MdArrowForward","getForwardHead","Message","React","useEffect","addToFrame","getElementById","contentWindow","encodedBody","parts","data","getHTMLPart","decode","arr","x","length","mimeType","borderTopRightRadius","borderBottomRightRadius","className","mt","display","align","replayTo","replaySubject","formatReplayData","MdArchive","ids","batchModify","removeLabelIds","then","resp","catch","error","messageId","trash","AspectRatioBox","ratio","as","Api","App","props","handleAuthResult","authResult","hideAuthBtn","loadClient","displayAuthBtn","style","handleAuthClick","auth","authorize","client_id","scope","immediate","load","getMessages","err","list","maxResults","response","setState","getMessagesRow","get","state","getOneMessage","currentTarget","getAttribute","categoryId","setApiKey","onerror","alert","timeout","ontimeout","this","ThemeProvider","CSSReset","MessageList","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.2ca29317.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\nimport { BsPlusCircle } from \"react-icons/bs\";\r\n\r\nconst SendModel = () => {\r\n  console.log(\"SendModel...\");\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  let handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    console.log(e.target);\r\n    console.log(emailTo, subject, message);\r\n\r\n    // Send Simple Mail\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      message,\r\n      handleSendResponse\r\n    );\r\n  };\r\n\r\n  let sendMessage = (headers_obj, message, callback) => {\r\n    var email = \"\";\r\n\r\n    for (var header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    var base64EncodedEmail = Base64.encodeURI(email);\r\n    var request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  let handleSendResponse = (res) => {\r\n    console.log(res.result);\r\n    if (res.result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        description: \"We've Sent your email.\",\r\n        status: \"success\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your email.\",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        w='100%'\r\n        h='48px'\r\n        leftIcon={BsPlusCircle}\r\n        border='1px'\r\n        borderRadius='20px'\r\n        borderColor='green.500'\r\n        variantColor='green'\r\n        variant='solid'\r\n        onClick={onOpen}\r\n      >\r\n        Compose mail\r\n      </Button>\r\n      <Modal isOpen={isOpen} size='xl' onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>New Message</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SendModel;\r\n","import React from \"react\";\r\nimport SendModel from \"./SendModel\";\r\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\r\nimport { FiSend, FiFile } from \"react-icons/fi\";\r\n\r\nconst Aside = ({ getMessagesByCategory }) => {\r\n  console.log(\"Aside Component\");\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        w='16%'\r\n        h='100%'\r\n        bg='#00043c'\r\n        color='white'\r\n        borderTopLeftRadius='md'\r\n        borderBottomLeftRadius='md'\r\n      >\r\n        <List>\r\n          {/* Send Model */}\r\n          <ListItem p='0.5rem 1rem 1rem'>\r\n            <SendModel />\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='INBOX'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={MdInbox}\r\n              justifyContent='flex-start'\r\n              bg='#353863'\r\n              _hover={{ bg: \"#89b0c7\" }}\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Inbox\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='STARRED'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={MdStar}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Starred\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='IMPORTANT'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={MdLabel}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Important\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='SENT'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={FiSend}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Sent\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='DRAFT'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={FiFile}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Drafts\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='TRASH'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon='delete'\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Trash\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='CATEGORY_SOCIAL'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={MdPeople}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Social\r\n            </Button>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button\r\n              id='CATEGORY_PROMOTIONS'\r\n              w='100%'\r\n              h='45px'\r\n              py={2}\r\n              pl={8}\r\n              leftIcon={MdLoyalty}\r\n              justifyContent='flex-start'\r\n              variantColor='blue'\r\n              variant='ghost'\r\n              onClick={getMessagesByCategory}\r\n            >\r\n              Promotions\r\n            </Button>\r\n          </ListItem>\r\n        </List>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Aside;\r\n","export const getHeader = (headers, name) => {\r\n  const header = headers.find((header) => header.name === name);\r\n  return header !== undefined ? header.value : undefined;\r\n};\r\n\r\nexport const isEmpty = (obj) => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const decodeHtml = (html) => {\r\n  var txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const removeQuote = (str) => {\r\n  return str.replace(/['\"]+/g, \"\");\r\n};\r\n","import React from \"react\";\r\nimport { getHeader, isEmpty, decodeHtml, removeQuote } from \"../Helper\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Icon,\r\n  Avatar,\r\n  Text,\r\n  Spinner,\r\n  Skeleton,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Messages = ({ handleMessageClick, messagesRow }) => {\r\n  console.log(\"Messages List Component\");\r\n  console.log(messagesRow);\r\n\r\n  let displaySkeleton = () => {\r\n    return [1, 2, 3, 4, 5].map((i) => (\r\n      <Flex\r\n        justify='space-around'\r\n        py={2}\r\n        borderTop='1px'\r\n        borderBottom='1px'\r\n        borderColor='gray.200'\r\n      >\r\n        <Box>\r\n          <Skeleton width='48px' height='48px' borderRadius='50%' />\r\n        </Box>\r\n        <Box w='70%'>\r\n          <Skeleton height='20px' mb='10px' />\r\n          <Skeleton height='20px' mb='10px' />\r\n          <Skeleton height='30px' mb='10px' />\r\n        </Box>\r\n      </Flex>\r\n    ));\r\n  };\r\n\r\n  if (!isEmpty(messagesRow)) {\r\n    return (\r\n      <React.Fragment>\r\n        <Flex\r\n          direction='column'\r\n          wrap='no-wrap'\r\n          w='26%'\r\n          h='100%'\r\n          bg='#f1f1f1'\r\n          color='black'\r\n        >\r\n          {/* Search bar */}\r\n          <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n            <InputGroup size='lg'>\r\n              <InputLeftElement\r\n                children={<Icon name='search' color='gray.300' />}\r\n              />\r\n              <Input\r\n                type='text'\r\n                placeholder='Search mail'\r\n                borderWidth='0px'\r\n                borderRadius='0px'\r\n                focusBorderColor='white'\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n\r\n          {/* Message List */}\r\n          <Box overflowY='auto'>\r\n            {messagesRow.map((message) => {\r\n              const name = removeQuote(\r\n                getHeader(message.payload.headers, \"From\").split(\"<\")[0]\r\n              );\r\n              const subject = getHeader(message.payload.headers, \"Subject\");\r\n              const msg = message.snippet.substr(0, 75);\r\n              const background =\r\n                message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\r\n\r\n              return (\r\n                <Flex\r\n                  key={message.id}\r\n                  id={message.id}\r\n                  onClick={handleMessageClick}\r\n                  wrap='no-wrap'\r\n                  justify='space-around'\r\n                  py={2}\r\n                  bg={background}\r\n                  borderTop='1px'\r\n                  borderBottom='1px'\r\n                  borderColor='gray.300'\r\n                  cursor='pointer'\r\n                >\r\n                  <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\r\n                  <Box w='80%'>\r\n                    <Text fontSize='sm' color='gray.700' isTruncated>\r\n                      {removeQuote(name)}\r\n                    </Text>\r\n                    <Text\r\n                      fontSize='md'\r\n                      fontWeight='bold'\r\n                      color='#3182ce'\r\n                      isTruncated\r\n                    >\r\n                      {subject}\r\n                    </Text>\r\n                    <Text fontSize='xs' color='gray.500'>\r\n                      {decodeHtml(msg)}\r\n                    </Text>\r\n                  </Box>\r\n                </Flex>\r\n              );\r\n            })}\r\n          </Box>\r\n        </Flex>\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        {/* Container */}\r\n        <Flex\r\n          direction='column'\r\n          wrap='no-wrap'\r\n          w='26%'\r\n          h='100%'\r\n          bg='#f1f1f1'\r\n          color='black'\r\n        >\r\n          {/* Search bar */}\r\n          <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n            <InputGroup size='lg'>\r\n              <InputLeftElement\r\n                children={<Icon name='search' color='gray.300' />}\r\n              />\r\n              <Input\r\n                type='text'\r\n                placeholder='Search mail'\r\n                borderWidth='0px'\r\n                borderRadius='0px'\r\n                focusBorderColor='white'\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n\r\n          {/* Message List */}\r\n\r\n          {/* Display Skeleton */}\r\n          {displaySkeleton()}\r\n\r\n          {/* Display Spinner */}\r\n          {/* <Box mt={6} display='flex' align='center' justifyContent='center'>\r\n            <Spinner\r\n              thickness='4px'\r\n              speed='0.65s'\r\n              emptyColor='gray.200'\r\n              color='blue.500'\r\n              size='xl'\r\n            />\r\n          </Box> */}\r\n        </Flex>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n","import React from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay } from \"react-icons/md\";\r\nimport { isEmpty } from \"../Helper\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ReplyModel = ({ replayData }) => {\r\n  console.log(\"ReplyModel Component\", replayData);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  let handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    console.log(e.target);\r\n    console.log(emailTo, subject, replayMsgId, message);\r\n\r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: emailTo,\r\n        \"In-Reply-To\": replayMsgId,\r\n      },\r\n      message,\r\n      handleReplayResponse\r\n    );\r\n  };\r\n\r\n  let sendMessage = (headers_obj, message, callback) => {\r\n    var email = \"\";\r\n\r\n    for (var header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    var base64EncodedEmail = Base64.encodeURI(email);\r\n    var request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  let handleReplayResponse = (res) => {\r\n    console.log(res.result);\r\n    if (res.result) {\r\n      if (res.result.labelIds.indexOf(\"SENT\") !== -1) {\r\n        toast({\r\n          title: \"Message Sent.\",\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (!isEmpty(replayData)) {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          rightIcon={MdReplay}\r\n          variantColor='teal'\r\n          variant='outline'\r\n          onClick={onOpen}\r\n        >\r\n          Replay\r\n        </Button>\r\n        <Modal isOpen={isOpen} size='xl' onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Replay </ModalHeader>\r\n            <ModalCloseButton />\r\n            <form id='form' onSubmit={handleSubmit}>\r\n              <ModalBody>\r\n                <Input\r\n                  type='hidden'\r\n                  id='reply-message-id'\r\n                  value={replayData.msgId}\r\n                  readOnly\r\n                />\r\n                <FormControl isRequired>\r\n                  <Input\r\n                    type='email'\r\n                    id='emailTo'\r\n                    placeholder='To'\r\n                    aria-describedby='email-helper-text'\r\n                    value={replayData.to}\r\n                    readOnly\r\n                  />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                  <Input\r\n                    type='text'\r\n                    id='subject'\r\n                    placeholder='Subject'\r\n                    aria-describedby='subject-email-helper-text'\r\n                    value={replayData.subject}\r\n                    readOnly\r\n                  />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                  <Textarea\r\n                    id='message'\r\n                    minH='280px'\r\n                    size='xl'\r\n                    resize='vertical'\r\n                  />\r\n                </FormControl>\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button\r\n                  type='reset'\r\n                  variantColor='blue'\r\n                  mr={3}\r\n                  onClick={onClose}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button type='submit' variantColor='green'>\r\n                  Send\r\n                </Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </ModalContent>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <Button rightIcon={MdReplay} variantColor='teal' variant='outline'>\r\n          Replay\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ReplyModel;\r\n","import React from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay, MdArrowForward } from \"react-icons/md\";\r\nimport { getHeader, isEmpty } from \"../Helper\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\r\n  console.log(\"forwardData => \", forwardData);\r\n  // console.log(\"getMessageBody => \", getMessageBody);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  let handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const forwardTo = form.elements[\"emailTo\"].value;\r\n    console.log(forwardTo);\r\n    handleForwardMsg(\r\n      forwardTo,\r\n      forwardData.payload.headers,\r\n      getMessageBody(forwardData.payload)\r\n    );\r\n  };\r\n\r\n  let handleForwardMsg = (forwardTo, headers, body) => {\r\n    var msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + forwardTo + \"\\r\\n\";\r\n    msg += \"Content-Type: text/html; charset=UTF-8\" + \"\\r\\n\";\r\n    msg += \"\\r\\n\" + body;\r\n\r\n    sendMessage(\"me\", msg, handleForwardResponse);\r\n  };\r\n\r\n  let sendMessage = (userId, email, callback) => {\r\n    var base64EncodedEmail = Base64.encodeURI(email);\r\n    var request = window.gapi.client.gmail.users.messages.send({\r\n      userId: userId,\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  let handleForwardResponse = (res) => {\r\n    console.log(res);\r\n    if (res.result) {\r\n      if (res.result.labelIds.indexOf(\"SENT\") !== -1) {\r\n        toast({\r\n          title: \"Email forwarded Successfully.\",\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your mail.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  let getForwardHead = (headers) => {\r\n    var msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\r\n    return msg;\r\n  };\r\n\r\n  if (!isEmpty(forwardData)) {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          rightIcon={MdArrowForward}\r\n          variantColor='teal'\r\n          variant='outline'\r\n          onClick={onOpen}\r\n        >\r\n          Forward\r\n        </Button>\r\n\r\n        <Modal isOpen={isOpen} size='xl' onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Forward </ModalHeader>\r\n            <ModalCloseButton />\r\n            <form id='form' onSubmit={handleSubmit}>\r\n              <ModalBody>\r\n                <FormControl isRequired>\r\n                  <Input\r\n                    type='email'\r\n                    id='emailTo'\r\n                    placeholder='To'\r\n                    aria-describedby='email-helper-text'\r\n                  />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                  <Input\r\n                    type='text'\r\n                    id='subject'\r\n                    placeholder='Subject'\r\n                    aria-describedby='subject-email-helper-text'\r\n                    value={getHeader(forwardData.payload.headers, \"Subject\")}\r\n                    readOnly\r\n                  />\r\n                </FormControl>\r\n                <FormControl isRequired>\r\n                  <Textarea\r\n                    id='message'\r\n                    minH='280px'\r\n                    size='xl'\r\n                    resize='vertical'\r\n                    value={\r\n                      \"------Forward Message------\\r\\n\" +\r\n                      getForwardHead(forwardData.payload.headers)\r\n                    }\r\n                    readOnly\r\n                  />\r\n                </FormControl>\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button\r\n                  type='reset'\r\n                  variantColor='blue'\r\n                  mr={3}\r\n                  onClick={onClose}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button type='submit' variantColor='green'>\r\n                  Send\r\n                </Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </ModalContent>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Fragment>\r\n        <Button rightIcon={MdReplay} variantColor='teal' variant='outline'>\r\n          Replay\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ForwardModel;\r\n","import React from \"react\";\r\nimport ReplyModel from \"./ReplyModel\";\r\nimport ForwardModel from \"./ForwardModel\";\r\nimport { getHeader, isEmpty, removeQuote } from \"../Helper\";\r\nimport { MdArchive } from \"react-icons/md\";\r\nimport { Base64 } from \"js-base64\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  AspectRatioBox,\r\n  Avatar,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Message = ({ message }) => {\r\n  console.log(\"Message Component\", message);\r\n  const headers = isEmpty(message) ? [] : message.payload.headers;\r\n  const toast = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (!isEmpty(message)) {\r\n      addToFrame(message);\r\n    }\r\n  }, [message]);\r\n\r\n  let formatReplayData = (headers) => {\r\n    const replayTo =\r\n      getHeader(headers, \"Reply-to\") !== undefined\r\n        ? getHeader(headers, \"Reply-to\")\r\n        : getHeader(headers, \"From\");\r\n    const replaySubject = getHeader(headers, \"Subject\");\r\n    const replayMsgId = getHeader(headers, \"Message-ID\");\r\n\r\n    return {\r\n      to: `${replayTo}`,\r\n      subject: `Re: ${replaySubject}`,\r\n      msgId: `${replayMsgId}`,\r\n    };\r\n  };\r\n\r\n  let handleTrashBtn = (userId, messageId) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .trash({\r\n        userId: userId,\r\n        id: messageId,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 200) {\r\n          toast({\r\n            title: \"Message Deleted\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Delete Message.\",\r\n          status: \"warning\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  let handleArchiveBtn = (ids, labelIds) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .batchModify({\r\n        userId: \"me\",\r\n        resource: {\r\n          ids: ids,\r\n          removeLabelIds: labelIds,\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 204) {\r\n          toast({\r\n            title: \"Message Archived\",\r\n            description: \"The Message is now in archive category.\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Archive Message.\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  let addToFrame = (message) => {\r\n    var ifrm = document.getElementById(\"iframe\").contentWindow.document;\r\n    ifrm.body.innerHTML = getMessageBody(message.payload);\r\n  };\r\n\r\n  let getMessageBody = (message) => {\r\n    var encodedBody = \"\";\r\n    if (typeof message.parts === \"undefined\") {\r\n      encodedBody = message.body.data;\r\n    } else {\r\n      encodedBody = getHTMLPart(message.parts);\r\n    }\r\n\r\n    return Base64.decode(encodedBody);\r\n  };\r\n\r\n  let getHTMLPart = (arr) => {\r\n    for (var x = 0; x <= arr.length; x++) {\r\n      if (typeof arr[x].parts === \"undefined\") {\r\n        if (arr[x].mimeType === \"text/html\") {\r\n          return arr[x].body.data;\r\n        }\r\n      } else {\r\n        return getHTMLPart(arr[x].parts);\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  if (!isEmpty(message)) {\r\n    return (\r\n      <Flex\r\n        direction='column'\r\n        wrap='no-wrap'\r\n        w='58%'\r\n        h='100%'\r\n        p='0.6rem 1rem'\r\n        bg='white'\r\n        color='black'\r\n        border='1px'\r\n        borderColor='gray.200'\r\n        borderTopRightRadius='md'\r\n        borderBottomRightRadius='md'\r\n      >\r\n        {/* Header Buttons */}\r\n        <Flex justify='space-around' wrap='no-wrap' mb={2}>\r\n          <ReplyModel replayData={formatReplayData(message.payload.headers)} />\r\n          <ForwardModel forwardData={message} getMessageBody={getMessageBody} />\r\n\r\n          <Button\r\n            rightIcon={MdArchive}\r\n            variantColor='teal'\r\n            variant='outline'\r\n            onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\r\n          >\r\n            Archive\r\n          </Button>\r\n          <Button\r\n            rightIcon='delete'\r\n            variantColor='teal'\r\n            variant='outline'\r\n            onClick={() => handleTrashBtn(\"me\", message.id)}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </Flex>\r\n\r\n        {/* Mail Container */}\r\n        <Box className='mailContainer' p={2}>\r\n          {/* Header Mail */}\r\n          <Box className='mailHeader' mb={2}>\r\n            <Text fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\r\n              {getHeader(headers, \"Subject\")}\r\n            </Text>\r\n            <Flex wrap='no-wrap' justify='flex-start'>\r\n              <Avatar\r\n                name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\r\n                src='https://bit.ly/tioluwani-kolawole'\r\n                mr={4}\r\n              />\r\n              <Box w='80%'>\r\n                SAK\r\n                <Text fontSize='md' color='gray.700'>\r\n                  {getHeader(headers, \"From\")}\r\n                </Text>\r\n                <Text fontSize='sm' color='gray.500'>\r\n                  {getHeader(headers, \"Date\")}\r\n                </Text>\r\n              </Box>\r\n            </Flex>\r\n            <Text fontSize='sm' color='gray.700' mt={1}>\r\n              {`To: ${getHeader(headers, \"To\")}`}\r\n            </Text>\r\n          </Box>\r\n\r\n          {/* Body Mail */}\r\n          <Box className='mailBody'>\r\n            <AspectRatioBox ratio={16 / 9}>\r\n              <Box as='iframe' id='iframe' title='messageBody'>\r\n                <p>Your browser does not support iframes.</p>\r\n              </Box>\r\n            </AspectRatioBox>\r\n          </Box>\r\n        </Box>\r\n      </Flex>\r\n    );\r\n  } else {\r\n    return (\r\n      <Flex\r\n        direction='column'\r\n        wrap='no-wrap'\r\n        w='58%'\r\n        h='100%'\r\n        p='0.6rem 1rem'\r\n        bg='white'\r\n        color='black'\r\n        border='1px'\r\n        borderColor='gray.200'\r\n        borderTopRightRadius='md'\r\n        borderBottomRightRadius='md'\r\n      >\r\n        {/* Header Buttons */}\r\n        <Flex justify='space-around' wrap='no-wrap' mb={2}></Flex>\r\n        <Box\r\n          className='mailContainer'\r\n          mt={6}\r\n          p={2}\r\n          display='flex'\r\n          align='center'\r\n          justifyContent='center'\r\n        ></Box>\r\n      </Flex>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Message;\r\n","export const Api = {\r\n  clientId:\r\n    \"151874614484-4l3jt39oita663cgip5ts1s7d7npaop6.apps.googleusercontent.com\",\r\n  apiKey: \"AIzaSyAzQf9oXQG7FR2FixHcVp9ksFK9NQpqKZs\",\r\n  scopes: \"https://mail.google.com/\",\r\n};\r\n\r\n// https://www.googleapis.com/auth/gmail.readonly =>  Read all resources\r\n// https://www.googleapis.com/auth/gmail.labels   =>  Create, read, update, and delete labels only.\r\n// https://www.googleapis.com/auth/gmail.send     =>  Send messages only.\r\n// https://mail.google.com/                       =>  Full access","import React, { Component } from \"react\";\r\nimport Aside from \"./Components/Aside/Aside\";\r\nimport MessageList from \"./Components/MessageList/MessageList\";\r\nimport Message from \"./Components/Message/Message\";\r\nimport { Api } from \"./Components/Api\";\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\n\r\nexport class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      messagesRow: [],\r\n      message: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.gapi.load(\"client:auth2\", {\r\n      callback: () => {\r\n        // Handle gapi.client initialization.\r\n        window.gapi.client.setApiKey(Api.apiKey);\r\n        window.gapi.auth.authorize(\r\n          {\r\n            client_id: Api.clientId,\r\n            scope: Api.scopes,\r\n            immediate: true,\r\n          },\r\n          this.handleAuthResult\r\n        );\r\n      },\r\n      onerror: function () {\r\n        // Handle loading error.\r\n        alert(\"gapi.client failed to load!\");\r\n      },\r\n      timeout: 5000, // 5 seconds.\r\n      ontimeout: function () {\r\n        // Handle timeout.\r\n        alert(\"gapi.client could not load in a timely manner!\");\r\n      },\r\n    });\r\n  }\r\n\r\n  handleAuthResult = (authResult) => {\r\n    if (authResult && !authResult.error) {\r\n      console.log(\"Sign-in successful\");\r\n      console.log(authResult);\r\n      this.hideAuthBtn();\r\n      this.loadClient();\r\n    } else {\r\n      console.error(\"handleAuthResult...\");\r\n      console.error(authResult);\r\n      this.displayAuthBtn();\r\n    }\r\n  };\r\n\r\n  hideAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"none\";\r\n  };\r\n\r\n  displayAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"block\";\r\n  };\r\n\r\n  handleAuthClick = () => {\r\n    return window.gapi.auth.authorize(\r\n      {\r\n        client_id: Api.clientId,\r\n        scope: Api.scopes,\r\n        immediate: false,\r\n      },\r\n      this.handleAuthResult\r\n    );\r\n  };\r\n\r\n  loadClient = () => {\r\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\r\n      (res) => {\r\n        console.log(\"window.gapi client loaded for API\");\r\n        this.getMessages();\r\n      },\r\n      (err) => {\r\n        console.error(\"Error loading window.gapi client for API\", err);\r\n      }\r\n    );\r\n  };\r\n  // ----------- REQUEST ------------\r\n  getMessages = (labelIds = \"INBOX\") => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .list({\r\n        userId: \"me\",\r\n        labelIds: labelIds,\r\n        maxResults: 20,\r\n      })\r\n      .then(\r\n        (response) => {\r\n          // Handle the results here (response.result has the parsed body).\r\n          console.log(\"getMessages...\");\r\n          console.log(response.result);\r\n\r\n          const messages = response.result.messages\r\n            ? response.result.messages\r\n            : [];\r\n          this.setState({\r\n            messages: messages,\r\n            messagesRow: [],\r\n          });\r\n\r\n          // Create & send request for each message id from messages List\r\n          this.getMessagesRow(messages);\r\n        },\r\n        (err) => {\r\n          console.error(\"getMessages error\", err);\r\n        }\r\n      );\r\n  };\r\n\r\n  getMessagesRow = (messages) => {\r\n    messages.map((message) => {\r\n      return window.gapi.client.gmail.users.messages\r\n        .get({\r\n          userId: \"me\",\r\n          id: message.id,\r\n        })\r\n        .then(\r\n          (response) => {\r\n            console.log(\"getMessagesRow...\", response);\r\n            this.setState((state) => ({\r\n              messagesRow: [...state.messagesRow, response.result],\r\n            }));\r\n          },\r\n          (err) => {\r\n            console.error(\"getMessagesRow error\", err);\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  getOneMessage = (messageId) => {\r\n    console.log(\"getOneMessage...\");\r\n\r\n    return window.gapi.client.gmail.users.messages\r\n      .get({\r\n        userId: \"me\",\r\n        id: messageId,\r\n      })\r\n      .then(\r\n        (response) => {\r\n          this.setState({\r\n            message: response.result,\r\n          });\r\n        },\r\n        (err) => {\r\n          console.error(\"getMessage error\", err);\r\n        }\r\n      );\r\n  };\r\n\r\n  handleMessageClick = (e) => {\r\n    console.log(\"handleMessageClick...\");\r\n    console.log(\"currentTarget\", e.currentTarget);\r\n    const messageId = e.currentTarget.getAttribute(\"id\");\r\n    console.log(\"Message ID : \", messageId);\r\n    this.getOneMessage(messageId);\r\n  };\r\n\r\n  getMessagesByCategory = (e) => {\r\n    var categoryId = e.target.id;\r\n    console.log(categoryId);\r\n    this.getMessages([categoryId]);\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const { message, messagesRow } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <ThemeProvider>\r\n          <CSSReset />\r\n          <Button\r\n            id='authBtn'\r\n            display='none'\r\n            variantColor='teal'\r\n            variant='outline'\r\n            onClick={this.handleAuthClick}\r\n          >\r\n            Authorize\r\n          </Button>\r\n\r\n          <Flex\r\n            h='100vh'\r\n            minH='600px'\r\n            justify='space-arround'\r\n            wrap='no-wrap'\r\n            p='1em'\r\n            bg='#e5f4f1'\r\n            color='white'\r\n          >\r\n            <Aside getMessagesByCategory={this.getMessagesByCategory} />\r\n            <MessageList\r\n              handleMessageClick={this.handleMessageClick}\r\n              messagesRow={messagesRow}\r\n            />\r\n            <Message message={message} />\r\n          </Flex>\r\n        </ThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}