{"version":3,"sources":["Components/Aside/SendModel.js","Components/Aside/Aside.js","Components/Helper.js","Components/MessageList/MessageList.js","Components/Message/ReplyModel.js","Components/Message/ForwardModel.js","Components/Message/Message.js","App.js","index.js"],"names":["SendModel","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","message","callback","email","header","base64EncodedEmail","Base64","encodeURI","window","gapi","client","gmail","users","messages","send","userId","resource","raw","execute","displayToast","result","labelIds","indexOf","title","description","status","duration","isClosable","Button","w","h","leftIcon","BsPlusCircle","borderRadius","variant","variantColor","onClick","Modal","size","closeOnOverlayClick","id","onSubmit","e","preventDefault","form","target","emailTo","elements","value","subject","To","Subject","FormControl","isRequired","Input","type","placeholder","aria-describedby","Textarea","minH","resize","mr","Aside","getMessages","handleClick","categoryId","Box","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","MdStar","MdLabel","FiSend","className","FiFile","MdPeople","MdLoyalty","prototype","PropTypes","func","getHeader","headers","name","find","undefined","isEmpty","obj","key","hasOwnProperty","removeQuote","str","replace","Messages","getOneMessage","handleMessageClick","messageId","currentTarget","getAttribute","Flex","direction","wrap","color","InputGroup","children","Icon","borderWidth","focusBorderColor","mt","display","align","Spinner","thickness","speed","emptyColor","overflowY","map","payload","split","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","justify","borderTop","borderBottom","cursor","Avatar","src","Text","fontSize","isTruncated","fontWeight","array","ReplyModel","replayData","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","object","ForwardModel","forwardData","getMessageBody","handleForwardMsg","forwardTo","body","MdArrowForward","getForwardHead","Message","React","useEffect","addToFrame","getElementById","contentWindow","encodedBody","parts","data","getHTMLPart","decode","arr","x","length","mimeType","borderTopRightRadius","borderBottomRightRadius","mb","replayTo","replaySubject","formatReplayData","MdArchive","ids","batchModify","removeLabelIds","then","resp","catch","error","console","log","trash","flexGrow","strDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","formatDate","AspectRatioBox","ratio","as","App","useState","setmessages","setMessage","load","setApiKey","process","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","hideAuthBtn","loadClient","displayAuthBtn","style","res","err","request","list","maxResults","getMessagesData","response","forEach","get","ThemeProvider","CSSReset","MessageList","ReactDOM","render"],"mappings":"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","file":"static/js/main.a7491b6c.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { BsPlusCircle } from \"react-icons/bs\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst SendModel = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Simple Mail && Display Toast\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (var header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        description: \"We've Sent your email.\",\r\n        status: \"success\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your email.\",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        w='100%'\r\n        h='48px'\r\n        leftIcon={BsPlusCircle}\r\n        borderRadius='20px'\r\n        variant='solid'\r\n        variantColor='blue'\r\n        // border='1px'\r\n        // borderColor='green.500'\r\n        // variantColor='green'\r\n        // variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        New Message\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>New Message</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SendModel;\r\n","import React from \"react\";\r\nimport SendModel from \"./SendModel\";\r\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\r\nimport { FiSend, FiFile } from \"react-icons/fi\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Aside = ({ getMessages }) => {\r\n  const handleClick = (e) => {\r\n    const categoryId = e.target.id;\r\n    // Get Messages using clicked category\r\n    getMessages(categoryId);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      w='16%'\r\n      h='100%'\r\n      bg='white'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopLeftRadius='md'\r\n      borderBottomLeftRadius='md'\r\n    >\r\n      <List>\r\n        {/* Send Model */}\r\n        <ListItem p='0.5rem 1rem 1rem'>\r\n          <SendModel />\r\n        </ListItem>\r\n\r\n        {/* Labels Buttons */}\r\n        <ListItem>\r\n          <Button\r\n            id='INBOX'\r\n            variantColor='blue'\r\n            variant='solid'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdInbox}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Inbox\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='STARRED'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdStar}\r\n            justifyContent='flex-start'\r\n            onClick={handleClick}\r\n          >\r\n            Starred\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='IMPORTANT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLabel}\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Important\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='SENT'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiSend}\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Sent\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='DRAFT'\r\n            className='labelBtn'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={FiFile}\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Drafts\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='TRASH'\r\n            className='labelBtn'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon='delete'\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Trash\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_SOCIAL'\r\n            className='labelBtn'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdPeople}\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Social\r\n          </Button>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Button\r\n            id='CATEGORY_PROMOTIONS'\r\n            className='labelBtn'\r\n            w='100%'\r\n            h='45px'\r\n            py={2}\r\n            pl={8}\r\n            leftIcon={MdLoyalty}\r\n            justifyContent='flex-start'\r\n            variantColor='blue'\r\n            variant='ghost'\r\n            onClick={handleClick}\r\n          >\r\n            Promotions\r\n          </Button>\r\n        </ListItem>\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nAside.prototype = {\r\n  getMessages: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Aside;\r\n","export const getHeader = (headers, name) => {\r\n  const header = headers.find((header) => header.name === name);\r\n  return header !== undefined ? header.value : undefined;\r\n};\r\n\r\nexport const isEmpty = (obj) => {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const decodeHtml = (html) => {\r\n  let txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\nexport const removeQuote = (str) => {\r\n  return str.replace(/['\"]+/g, \"\");\r\n};\r\n\r\nexport const formatDate = (strDate) => {\r\n  const date = new Date(strDate);\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"numeric\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hour12: true,\r\n  };\r\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n};\r\n","import React from \"react\";\r\nimport { getHeader, isEmpty, decodeHtml, removeQuote } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Icon,\r\n  Avatar,\r\n  Text,\r\n  Spinner,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Messages = ({ getOneMessage, messages }) => {\r\n\r\n  const handleMessageClick = (e) => {\r\n    const messageId = e.currentTarget.getAttribute(\"id\");\r\n    getOneMessage(messageId);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='26%'\r\n      h='100%'\r\n      bg='#f1f1f1'\r\n      color='black'\r\n    >\r\n      {/* Search bar */}\r\n      <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\r\n        <InputGroup size='lg'>\r\n          <InputLeftElement\r\n            children={<Icon name='search' color='gray.300' />}\r\n          />\r\n          <Input\r\n            type='text'\r\n            placeholder='Search mail'\r\n            borderWidth='0px'\r\n            borderRadius='0px'\r\n            focusBorderColor='white'\r\n          />\r\n        </InputGroup>\r\n      </Box>\r\n\r\n      {/* Message List */}\r\n      {isEmpty(messages) ? (\r\n        <Box mt={6} display='flex' align='center' justifyContent='center'>\r\n          <Spinner\r\n            thickness='4px'\r\n            speed='0.65s'\r\n            emptyColor='gray.200'\r\n            color='blue.500'\r\n            size='xl'\r\n          />\r\n        </Box>\r\n      ) : (\r\n        <Box overflowY='auto'>\r\n          {messages.map((message) => {\r\n            const name = removeQuote(\r\n              getHeader(message.payload.headers, \"From\").split(\"<\")[0]\r\n            );\r\n            const subject = getHeader(message.payload.headers, \"Subject\");\r\n            const msg = decodeHtml(message.snippet.substr(0, 75));\r\n            const backgroundColor =\r\n              message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\r\n\r\n            return (\r\n              <Flex\r\n                key={message.id}\r\n                id={message.id}\r\n                onClick={handleMessageClick}\r\n                wrap='no-wrap'\r\n                justify='space-around'\r\n                py={2}\r\n                bg={backgroundColor}\r\n                borderTop='1px'\r\n                borderBottom='1px'\r\n                borderColor='gray.300'\r\n                cursor='pointer'\r\n              >\r\n                <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\r\n                <Box w='80%'>\r\n                  <Text fontSize='sm' color='gray.700' isTruncated>\r\n                    {name}\r\n                  </Text>\r\n                  <Text\r\n                    fontSize='md'\r\n                    fontWeight='bold'\r\n                    color='#3182ce'\r\n                    isTruncated\r\n                  >\r\n                    {subject}\r\n                  </Text>\r\n                  <Text fontSize='xs' color='gray.500'>\r\n                    {msg}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n            );\r\n          })}\r\n        </Box>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n\r\nMessages.prototype = {\r\n  getOneMessage: PropTypes.func.isRequired,\r\n  messages: PropTypes.array.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdReplay } from \"react-icons/md\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ReplyModel = ({ replayData }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const emailTo = form.elements[\"emailTo\"].value;\r\n    const subject = form.elements[\"subject\"].value;\r\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\r\n    const message = form.elements[\"message\"].value;\r\n\r\n    // Send Replay\r\n    sendMessage(\r\n      {\r\n        To: emailTo,\r\n        Subject: subject,\r\n        \"In-Reply-To\": replayMsgId,\r\n      },\r\n      message,\r\n      displayToast\r\n    );\r\n\r\n    onClose();\r\n  };\r\n\r\n  const sendMessage = (headers_obj, message, callback) => {\r\n    let email = \"\";\r\n\r\n    for (let header in headers_obj)\r\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\r\n\r\n    email += \"\\r\\n\" + message;\r\n\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: \"me\",\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Message Sent.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your replay.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdReplay}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Replay\r\n      </Button>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Replay </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <Input\r\n                type='hidden'\r\n                id='reply-message-id'\r\n                value={replayData.msgId}\r\n                readOnly\r\n              />\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                  value={replayData.to}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={replayData.subject}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ReplyModel;\r\n\r\nReplyModel.prototype = {\r\n  replayData: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { MdArrowForward } from \"react-icons/md\";\r\nimport { getHeader } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  Textarea,\r\n  useToast,\r\n  useDisclosure,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const forwardTo = form.elements[\"emailTo\"].value;\r\n    handleForwardMsg(\r\n      forwardTo,\r\n      forwardData.payload.headers,\r\n      getMessageBody(forwardData.payload)\r\n    );\r\n    onClose();\r\n  };\r\n\r\n  const handleForwardMsg = (forwardTo, headers, body) => {\r\n    let email = \"\";\r\n    email += `From: ${getHeader(headers, \"From\")} \\r\\n`;\r\n    email += `Date: ${getHeader(headers, \"Date\")} \\r\\n`;\r\n    email += `Subject: ${getHeader(headers, \"Subject\")} \\r\\n`;\r\n    email += `To: ${forwardTo} \\r\\n`;\r\n    email += `Content-Type: text/html; charset=UTF-8 \\r\\n`;\r\n    email += `\\r\\n ${body}`;\r\n\r\n    sendMessage(\"me\", email, displayToast);\r\n  };\r\n\r\n  const sendMessage = (userId, email, callback) => {\r\n    const base64EncodedEmail = Base64.encodeURI(email);\r\n    const request = window.gapi.client.gmail.users.messages.send({\r\n      userId: userId,\r\n      resource: {\r\n        raw: base64EncodedEmail,\r\n      },\r\n    });\r\n    request.execute(callback);\r\n  };\r\n\r\n  const displayToast = ({ result }) => {\r\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\r\n      toast({\r\n        title: \"Email forwarded Successfully.\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"An error occurred.\",\r\n        description: \"Unable to sent your mail.\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getForwardHead = (headers) => {\r\n    let msg = \"\";\r\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\r\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\r\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\r\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\r\n    return msg;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        rightIcon={MdArrowForward}\r\n        variantColor='blue'\r\n        variant='outline'\r\n        onClick={onOpen}\r\n      >\r\n        Forward\r\n      </Button>\r\n\r\n      <Modal\r\n        isOpen={isOpen}\r\n        size='xl'\r\n        onClose={onClose}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Forward </ModalHeader>\r\n          <ModalCloseButton />\r\n          <form id='form' onSubmit={handleSubmit}>\r\n            <ModalBody>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='email'\r\n                  id='emailTo'\r\n                  placeholder='To'\r\n                  aria-describedby='email-helper-text'\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Input\r\n                  type='text'\r\n                  id='subject'\r\n                  placeholder='Subject'\r\n                  aria-describedby='subject-email-helper-text'\r\n                  value={getHeader(forwardData.payload.headers, \"Subject\")}\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n              <FormControl isRequired>\r\n                <Textarea\r\n                  id='message'\r\n                  minH='280px'\r\n                  size='xl'\r\n                  resize='vertical'\r\n                  value={\r\n                    \"------Forward Message------\\r\\n\" +\r\n                    getForwardHead(forwardData.payload.headers)\r\n                  }\r\n                  readOnly\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n              <Button type='submit' variantColor='green'>\r\n                Send\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ForwardModel;\r\n\r\nForwardModel.prototype = {\r\n  forwardData: PropTypes.object.isRequired,\r\n  getMessageBody: PropTypes.func.isRequired,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport ReplyModel from \"./ReplyModel\";\r\nimport ForwardModel from \"./ForwardModel\";\r\nimport { getHeader, isEmpty, removeQuote, formatDate } from \"../Helper\";\r\nimport { MdArchive } from \"react-icons/md\";\r\nimport { Base64 } from \"js-base64\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  AspectRatioBox,\r\n  Avatar,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Message = ({ message }) => {\r\n  const headers = isEmpty(message) ? [] : message.payload.headers;\r\n  const toast = useToast();\r\n\r\n  React.useEffect(() => {\r\n    if (!isEmpty(message)) {\r\n      addToFrame(message);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [message]);\r\n\r\n  const formatReplayData = (headers) => {\r\n    const replayTo =\r\n      getHeader(headers, \"Reply-to\") !== undefined\r\n        ? getHeader(headers, \"Reply-to\")\r\n        : getHeader(headers, \"From\");\r\n    const replaySubject = getHeader(headers, \"Subject\");\r\n    const replayMsgId = getHeader(headers, \"Message-ID\");\r\n\r\n    return {\r\n      to: `${replayTo}`,\r\n      subject: `Re: ${replaySubject}`,\r\n      msgId: `${replayMsgId}`,\r\n    };\r\n  };\r\n\r\n  const handleTrashBtn = (userId, messageId) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .trash({\r\n        userId: userId,\r\n        id: messageId,\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 200) {\r\n          toast({\r\n            title: \"Message Deleted\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Delete Message.\",\r\n          status: \"warning\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleArchiveBtn = (ids, labelIds) => {\r\n    return window.gapi.client.gmail.users.messages\r\n      .batchModify({\r\n        userId: \"me\",\r\n        resource: {\r\n          ids: ids,\r\n          removeLabelIds: labelIds,\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        if (resp.status === 204) {\r\n          toast({\r\n            title: \"Message Archived\",\r\n            description: \"The Message is now in archive category.\",\r\n            status: \"success\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \", error);\r\n        toast({\r\n          title: \"An error occurred.\",\r\n          description: \"Unable to Archive Message.\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const addToFrame = (message) => {\r\n    let ifrm = document.getElementById(\"iframe\").contentWindow.document;\r\n    ifrm.body.innerHTML = getMessageBody(message.payload);\r\n  };\r\n\r\n  const getMessageBody = (message) => {\r\n    const encodedBody =\r\n      typeof message.parts === \"undefined\"\r\n        ? message.body.data\r\n        : getHTMLPart(message.parts);\r\n\r\n    return Base64.decode(encodedBody);\r\n  };\r\n\r\n  const getHTMLPart = (arr) => {\r\n    for (var x = 0; x <= arr.length; x++) {\r\n      if (typeof arr[x].parts === \"undefined\") {\r\n        if (arr[x].mimeType === \"text/html\") {\r\n          return arr[x].body.data;\r\n        }\r\n      } else {\r\n        return getHTMLPart(arr[x].parts);\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      direction='column'\r\n      wrap='no-wrap'\r\n      w='58%'\r\n      h='100%'\r\n      p='0.6rem 1rem'\r\n      bg='white'\r\n      color='black'\r\n      border='1px'\r\n      borderColor='gray.200'\r\n      borderTopRightRadius='md'\r\n      borderBottomRightRadius='md'\r\n    >\r\n      {!isEmpty(message) && (\r\n        <Fragment>\r\n          {/* Header Buttons */}\r\n          <Flex justify='space-around' wrap='no-wrap' mb={2}>\r\n            <ReplyModel replayData={formatReplayData(headers)} />\r\n            <ForwardModel\r\n              forwardData={message}\r\n              getMessageBody={getMessageBody}\r\n            />\r\n            <Button\r\n              rightIcon={MdArchive}\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\r\n            >\r\n              Archive\r\n            </Button>\r\n            <Button\r\n              rightIcon='delete'\r\n              variantColor='blue'\r\n              variant='outline'\r\n              onClick={() => handleTrashBtn(\"me\", message.id)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Flex>\r\n\r\n          {/* Mail Container */}\r\n          <Flex\r\n            className='mailContainer'\r\n            flexGrow='2'\r\n            direction='column'\r\n            wrap='no-wrap'\r\n            p={2}\r\n          >\r\n            <Box className='mailHeader' mb={2}>\r\n              <Text fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\r\n                {getHeader(headers, \"Subject\")}\r\n              </Text>\r\n              <Flex wrap='no-wrap' justify='flex-start'>\r\n                <Avatar\r\n                  name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\r\n                  src='https://bit.ly/tioluwani-kolawole'\r\n                  mr={4}\r\n                />\r\n                <Box w='80%'>\r\n                  <Text fontSize='md' color='gray.700'>\r\n                    {getHeader(headers, \"From\")}\r\n                  </Text>\r\n                  <Text fontSize='sm' color='gray.500'>\r\n                    {formatDate(getHeader(headers, \"Date\"))}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n              <Text fontSize='sm' color='gray.700' mt={1}>\r\n                {`To: ${getHeader(headers, \"To\")}`}\r\n              </Text>\r\n            </Box>\r\n            <Box className='mailBody' flexGrow='2'>\r\n              <AspectRatioBox ratio={16 / 9} h='100%'>\r\n                <Box as='iframe' id='iframe' title='messageBody'>\r\n                  <p>Your browser does not support iframes.</p>\r\n                </Box>\r\n              </AspectRatioBox>\r\n            </Box>\r\n          </Flex>\r\n        </Fragment>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n\r\nMessage.prototype = {\r\n  message: PropTypes.object.isRequired,\r\n};\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\n\r\nimport Aside from \"./Components/Aside/Aside\";\r\nimport MessageList from \"./Components/MessageList/MessageList\";\r\nimport Message from \"./Components/Message/Message\";\r\n\r\nimport { ThemeProvider, CSSReset, Button, Flex } from \"@chakra-ui/core\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  // const [labels, setlabels] = useState([]); // Todo - sort labels dynamically\r\n  const [messages, setmessages] = useState([]);\r\n  const [message, setMessage] = useState({});\r\n\r\n  useEffect(() => {\r\n    window.gapi.load(\"client:auth2\", {\r\n      callback: () => {\r\n        // Handle gapi.client initialization.\r\n        window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\r\n        window.gapi.auth.authorize(\r\n          {\r\n            client_id: process.env.REACT_APP_CLIENT_ID,\r\n            scope: process.env.REACT_APP_SCOPES,\r\n            immediate: true,\r\n          },\r\n          handleAuthResult\r\n        );\r\n      },\r\n      onerror: function () {\r\n        // Handle loading error.\r\n        console.log(\"gapi.client failed to load!\");\r\n      },\r\n      timeout: 5000, // 5 seconds.\r\n      ontimeout: function () {\r\n        // Handle timeout.\r\n        console.log(\"gapi.client could not load in a timely manner!\");\r\n      },\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleAuthResult = (authResult) => {\r\n    if (authResult && !authResult.error) {\r\n      console.log(\"Sign-in successful\");\r\n      hideAuthBtn();\r\n      loadClient();\r\n    } else {\r\n      console.error(\"handleAuthResult...\");\r\n      console.error(authResult);\r\n      displayAuthBtn();\r\n    }\r\n  };\r\n\r\n  const hideAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"none\";\r\n  };\r\n\r\n  const displayAuthBtn = () => {\r\n    document.getElementById(\"authBtn\").style.display = \"block\";\r\n  };\r\n\r\n  const handleAuthClick = () => {\r\n    return window.gapi.auth.authorize(\r\n      {\r\n        client_id: process.env.REACT_APP_CLIENT_ID,\r\n        scope: process.env.REACT_APP_SCOPES,\r\n        immediate: false,\r\n      },\r\n      handleAuthResult\r\n    );\r\n  };\r\n\r\n  const loadClient = () => {\r\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\r\n      (res) => {\r\n        console.log(\"gapi client loaded for API\");\r\n        getMessages();\r\n      },\r\n      (err) => {\r\n        console.error(\"Error loading window.gapi client for API\", err);\r\n      }\r\n    );\r\n  };\r\n\r\n  // ----------- Functions to Get Data from Gmail Api ------------\r\n  const getMessages = (labelIds = \"INBOX\") => {\r\n    // Get List of 20 message's Id\r\n    const request = window.gapi.client.gmail.users.messages.list({\r\n      userId: \"me\",\r\n      labelIds: labelIds,\r\n      maxResults: 20,\r\n    });\r\n\r\n    // Send Id list to getMessagesData to get Message Data foreach Id\r\n    request.execute(getMessagesData);\r\n  };\r\n\r\n  const getMessagesData = (response) => {\r\n    const messages = response.result.messages ? response.result.messages : [];\r\n\r\n    messages.forEach((message) => {\r\n      window.gapi.client.gmail.users.messages\r\n        .get({\r\n          userId: \"me\",\r\n          id: message.id,\r\n        })\r\n        .then(\r\n          (response) => {\r\n            setmessages((messages) => [...messages, response.result]);\r\n          },\r\n          (err) => {\r\n            console.error(\"getMessagesData error\", err);\r\n          }\r\n        );\r\n    });\r\n  };\r\n\r\n  const getOneMessage = (messageId) => {\r\n    window.gapi.client.gmail.users.messages\r\n      .get({\r\n        userId: \"me\",\r\n        id: messageId,\r\n      })\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.result);\r\n        },\r\n        (err) => {\r\n          console.error(\"getMessage error\", err);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <ThemeProvider>\r\n        <CSSReset />\r\n        <Button\r\n          id='authBtn'\r\n          display='none'\r\n          variantColor='teal'\r\n          variant='outline'\r\n          onClick={handleAuthClick}\r\n        >\r\n          Authorize\r\n        </Button>\r\n\r\n        <Flex\r\n          h='100vh'\r\n          minH='600px'\r\n          justify='space-arround'\r\n          wrap='no-wrap'\r\n          p='1em'\r\n          bg='#e5f4f1'\r\n          color='white'\r\n        >\r\n          <Aside getMessages={getMessages} />\r\n          <MessageList getOneMessage={getOneMessage} messages={messages} />\r\n          <Message message={message} />\r\n        </Flex>\r\n      </ThemeProvider>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}